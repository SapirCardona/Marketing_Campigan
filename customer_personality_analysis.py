# -*- coding: utf-8 -*-
"""Customer Personality Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eBEMg5TdL4dbtXkqDtQ6plgRzFXTFOWS

# Introduction
This project explores the Customer Personality Analysis dataset, which contains marketing and demographic data about customers.
The goal is to analyze customer profiles, understand purchasing behaviors across different product categories, and uncover insights that can support targeted marketing strategies and business decision-making.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler

df = pd.read_csv("marketing_campaign.csv", sep='\t')

"""# Data Validation"""

df.head()

df.info()

df.describe()

df.isnull().sum()

duplicates = df.duplicated()
total_duplicates = df.duplicated().sum()

print(total_duplicates)

df['Education'].value_counts()

df['Marital_Status'].value_counts()

"""#**Data Validation Stage Summary:**

▶ **Incorrect Data Types:**
Some columns were loaded with incorrect data types. For example, Dt_Customer was loaded as object (string) but should be converted to datetime.
In addition, the ID column, currently of type int, could be more appropriately treated as object since it serves as a unique identifier and not a numeric value for calculations.

▶ **Unclear Column Names:**
Several column names were not intuitive or informative. Renaming them to improve clarity is recommended.
For example:
Dt_Customer to Customer_Joining_Date,
MntWins to Amount_Spent_Wine, etc.
Z_CostContact and Z_Revenue to clearer, more descriptive names.

▶ **Missing Values:**
A total of 24 missing values were detected in the Income column. This will require a decision in the next phase on how to handle these missing values.

▶ **Duplicate Entries:**
No duplicate records were found in the dataset.

▶ **Suspicious or Outlier Values:**
During validation, unrealistic birth years were detected in the Year_Birth column.

▶ **Unexpected or Invalid Marital Status Values:**
A small number of customer records were found with unclear or invalid values in the Marital_Status column, such as 'YOLO' and 'Absurd'.
Additionally, the value 'Alone' was detected and will also be addressed in the next phase

# These findings were documented and informed the targeted cleaning actions taken in the next phase.

# Data Cleaning
"""

df['Dt_Customer'] = pd.to_datetime(df['Dt_Customer'], dayfirst=True)
df['ID'] = df['ID'].astype('object')

"""Dt_Customer column was converted to a standardized datetime format to ensure consistency in date-based analyses."""

df.rename(columns={
    'Dt_Customer': 'Customer_Joining_Date',
    'MntWines': 'Amount_Spent_Wine',
    'MntFruits': 'Amount_Spent_Fruits',
    'MntMeatProducts': 'Amount_Spent_Meat',
    'MntSweetProducts': 'Amount_Spent_Sweet',
    'MntGoldProds': 'Amount_Spent_Primium_Products',
    'MntFishProducts': 'Amount_Spent_Fish'
}, inplace=True)

"""Renamed columns to more descriptive and meaningful names to enhance readability and ensure better understanding of the dataset's content."""

df.drop(columns=['Z_CostContact', 'Revenue'], inplace=True)

"""Removal of non-informative columns (columns with identical values across all records)"""

average_income = int(df['Income'].mean())
df['Income'] = df['Income'].fillna(average_income)

"""Calculated the average income across the dataset and replaced missing values in the Income column (24 records) with this average."""

min_year_birth = df['Year_Birth'].min()
print(min_year_birth)
df[df['Year_Birth'] < 1914]['Year_Birth'].value_counts().sort_index()

"""Identified the minimum recorded year of birth in the dataset. Based on the data collection year (2014), defined customers older than 100 (born before 1914) as outliers."""

df['Marital_Status'].value_counts()

"""During data exploration, identified several unclear or inconsistent marital status values.

4 records (Absurd, YOLO) had no clear business meaning and were recategorized as 'Unknown' to flag them as undefined.
"""

df['Marital_Status'] = df['Marital_Status'].replace('Alone', 'Single')

"""3 records with variants 'Alone' status were standardized to 'Single' to align with the dataset’s existing terminology.

#  Data Preparation
"""

df['Total_Spent'] = df[['Amount_Spent_Wine', 'Amount_Spent_Fruits', 'Amount_Spent_Meat',
                        'Amount_Spent_Fish', 'Amount_Spent_Sweet', 'Amount_Spent_Primium_Products']].sum(axis=1)

fact_customers = df[[
    'ID',
    'Year_Birth',
    'Education',
    'Marital_Status',
    'Income',
    'Kidhome',
    'Teenhome',
    'Customer_Joining_Date',
    'Recency',
    'Complain'
]]

categories_spent = df[[
    'ID',
    'Amount_Spent_Wine',
    'Amount_Spent_Fruits',
    'Amount_Spent_Meat',
    'Amount_Spent_Fish',
    'Amount_Spent_Sweet',
    'Amount_Spent_Primium_Products',
    'Total_Spent'
]]

campaigns = df[[
    'ID',
    'AcceptedCmp1',
    'AcceptedCmp2',
    'AcceptedCmp3',
    'AcceptedCmp4',
    'AcceptedCmp5',
    'Response'
]]

channels = df[[
    'ID',
    'NumDealsPurchases',
    'NumWebPurchases',
    'NumCatalogPurchases',
    'NumStorePurchases',
    'NumWebVisitsMonth'
]]

fact_customers.to_csv('fact_customers.csv', index=False)
categories_spent.to_csv('categories_spent.csv', index=False)
campaigns.to_csv('campaigns.csv', index=False)
channels.to_csv('channels.csv', index=False)

import zipfile

csv_files = [
    'fact_customers.csv',
    'categories_spent.csv',
    'campaigns.csv',
    'channels.csv'
]

with zipfile.ZipFile('customer_personality_dataframes.zip', 'w') as zipf:
    for file in csv_files:
        zipf.write(file)

from google.colab import files
files.download('customer_personality_dataframes.zip')

"""# Data Visualization"""

plt.figure(figsize=(10,3))
sns.countplot(data=fact_customers, x='Education', palette='Set2')
plt.title('Distribution of Education Levels')
plt.xlabel('Education Level')
plt.ylabel('Number of Customers')
plt.xticks(rotation=45)
plt.show()

"""The majority of customers hold undergraduate or advanced degrees (Graduation, PhD, Master), with very few having only basic education."""

plt.figure(figsize=(10,3))
sns.countplot(data=fact_customers, x='Marital_Status', palette='Set2')
plt.title('Distribution of Marital Status')
plt.xlabel('Marital Status')
plt.ylabel('Number of Customers')
plt.xticks(rotation=45)
plt.show()

"""
Married and Together customers make up the largest groups, followed by Singles. Divorced and Widow customers represent smaller segments."""

category_totals = categories_spent.drop(columns=['Total_Spent','ID']).sum()

category_totals_df = pd.DataFrame({
    'Category': category_totals.index,
    'Total_Spent': category_totals.values
})


plt.figure(figsize=(10,3))
sns.barplot(data=category_totals_df, x='Category', y='Total_Spent', palette='Set2')
plt.title('Total Amount Spent by Product Category')
plt.xlabel('Product Category')
plt.ylabel('Total Amount Spent im in $')
plt.xticks(rotation=45)
plt.show()

"""Spending is highly concentrated on Wine and Meat, while other categories like Fruits, Fish, Sweets, and Premium Products receive significantly lower spending.

This gap could potentially be influenced by pricing differences.
"""

purchase_counts = (categories_spent.drop(columns=['ID', 'Total_Spent']) > 0).sum()
purchase_counts_df = pd.DataFrame({
    'Category': purchase_counts.index,
    'Number_of_Purchases': purchase_counts.values
})

plt.figure(figsize=(10,3))
sns.barplot(data=purchase_counts_df.sort_values(by='Number_of_Purchases', ascending=False),
            x='Category', y='Number_of_Purchases', palette='Set2')
plt.title('Number of Purchases by Product Category')
plt.xlabel('Product Category')
plt.ylabel('Number of Purchases')
plt.xticks(rotation=45)
plt.show()

"""Although Wine and Meat stand out as the top revenue generators, the number of purchases across all categories is relatively balanced, with smaller gaps than initially expected.

This suggests that the higher revenue from Wine and Meat is driven primarily by higher product pricing, rather than significantly higher purchase volume.
"""

category_cols = ['Amount_Spent_Wine',
                 'Amount_Spent_Fruits',
                 'Amount_Spent_Meat',
                 'Amount_Spent_Fish',
                 'Amount_Spent_Sweet',
                 'Amount_Spent_Primium_Products']

marital_category_summary = df.groupby('Marital_Status')[category_cols].sum()

plt.figure(figsize=(10,3))
sns.heatmap(marital_category_summary.T, cmap='YlGnBu', annot=True, fmt='.0f')
plt.title('Total Spending by Product Category and Marital Status')
plt.xlabel('Marital Status')
plt.ylabel('Product Category')
plt.show()

"""Married and Together customers are the top spenders across most categories, particularly Wine and Meat. Divorced and Widow customers spend the least."""

category_cols = ['Amount_Spent_Wine',
                 'Amount_Spent_Fruits',
                 'Amount_Spent_Meat',
                 'Amount_Spent_Fish',
                 'Amount_Spent_Sweet',
                 'Amount_Spent_Primium_Products']

education_category_summary = df.groupby('Education')[category_cols].sum()

plt.figure(figsize=(10,3))
sns.heatmap(education_category_summary.T, cmap='YlGnBu', annot=True, fmt='.0f')
plt.title('Total Spending by Product Category and Education Level')
plt.xlabel('Education Level')
plt.ylabel('Product Category')
plt.show()

"""Customers with Graduation and higher education levels show significantly higher spending across all product categories, especially on Wine and Meat.
Basic education customers show minimal purchasing activity.
"""

plt.figure(figsize=(8, 5))
sns.scatterplot(data=df, x='Income', y='Total_Spent')
plt.title('Income vs Total Spending on All Product Categories')
plt.xlabel('Income')
plt.ylabel('Total Spending')
plt.show()

filtered_df = df[df['Income'] <= 200000]

plt.figure(figsize=(8, 5))
sns.scatterplot(data=filtered_df, x='Income', y='Total_Spent', hue='Marital_Status')
plt.title('Income vs Total Spending (Income ≤ 200K)')
plt.xlabel('Income')
plt.ylabel('Total Spending')
plt.show()

df['Quarter'] = df['Customer_Joining_Date'].dt.to_period('Q').dt.start_time
quarterly_counts = df.groupby('Quarter').size().reset_index(name='Number_of_Customers')

plt.figure(figsize=(12, 3))
sns.lineplot(data=quarterly_counts, x='Quarter', y='Number_of_Customers', marker='o')
plt.title('Customer Joining Dates by Quarter')
plt.xlabel('Quarter Starting Date')
plt.ylabel('Number of Customers')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(8, 4))
sns.histplot(df['Income'], bins=30, kde=True)
plt.title('Income Distribution')
plt.xlabel('Income')
plt.ylabel('Frequency')
plt.show()

"""The income distribution is right-skewed, meaning that the majority of customers earn between 0 and 100,000 USD annually, with a small group of very high-income individuals pulling the distribution's tail upward."""

plt.figure(figsize=(8, 4))
sns.boxplot(data=df, x='Education', y='Total_Spent')
plt.title('Total Spending by Education Level')
plt.xlabel('Education')
plt.ylabel('Total Spending')
plt.xticks(rotation=45)
plt.show()

"""Customers with basic education spend significantly less than all other education groups, both in median and overall spending range."""

df['Age'] = 2014 - df['Year_Birth']
features = ['Age', 'Kidhome', 'Teenhome',
            'NumStorePurchases', 'NumWebPurchases',
            'NumCatalogPurchases', 'NumDealsPurchases', 'Income']

X = df[features]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
kmeans = KMeans(n_clusters=4, random_state=42)
clusters = kmeans.fit_predict(X_scaled)
df['Cluster'] = clusters

tsne = TSNE(n_components=2, random_state=42, perplexity=30)
X_tsne = tsne.fit_transform(X_scaled)

plt.figure(figsize=(10, 6))
plt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=df['Cluster'], cmap='Set2')
plt.title('t-SNE Visualization of Clusters')
plt.xlabel('TSNE-1')
plt.ylabel('TSNE-2')
plt.show()